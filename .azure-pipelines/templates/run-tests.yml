steps:
- ${{ if eq(variables['Agent.OS'], 'Linux') }}:
  - script: |
      # When you paste this, please make sure the indentation is preserved
      # Fail out if any setups fail
      set -e

      # Delete old Pythons
      rm -rf $AGENT_TOOLSDIRECTORY/Python/2.7.16
      rm -rf $AGENT_TOOLSDIRECTORY/Python/3.5.7
      rm -rf $AGENT_TOOLSDIRECTORY/Python/3.7.3

      # Download new Pythons
      azcopy --recursive \
        --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/2.7.15 \
        --destination $AGENT_TOOLSDIRECTORY/Python/2.7.15

      azcopy --recursive \
        --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/3.5.5 \
        --destination $AGENT_TOOLSDIRECTORY/Python/3.5.5

      azcopy --recursive \
        --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/3.7.2 \
        --destination $AGENT_TOOLSDIRECTORY/Python/3.7.2

      # Install new Pythons
      original_directory=$PWD
      setups=$(find $AGENT_TOOLSDIRECTORY/Python -name setup.sh)
      for setup in $setups; do
          chmod +x $setup;
          cd $(dirname $setup);
          ./$(basename $setup);
          cd $original_directory;
      done;
    displayName: 'Workaround: roll back Python versions'

- task: UsePythonVersion@0
  inputs:
    versionSpec: $(python.version)
  displayName: Use Python $(python.version)

- template: install-dependencies.yml

- script: pipenv run pip install -e .[dev,tests] --upgrade
  displayName: Install Package

- script: pipenv run pytest -ra --junitxml=junit/test-results.xml tests/
  displayName: 'Run Pytest'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
  condition: succeededOrFailed()
  displayName: 'Publish Test Results'
